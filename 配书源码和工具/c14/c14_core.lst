     1                                           ;代码清单14-1
     2                                           ;文件名：c14_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2011-11-6 18:37
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [A1030000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 740B                             jz .exit
    44 00000007 E808000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D E9EFFFFFFF                       jmp .getc
    47                                  
    48                                    .exit:
    49 00000012 59                               pop ecx
    50 00000013 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用 
    55                                                                              ;输入：CL=字符ASCII码 
    56 00000014 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000015 66BAD403                         mov dx,0x3d4
    60 00000019 B00E                             mov al,0x0e
    61 0000001B EE                               out dx,al
    62 0000001C 6642                             inc dx                             ;0x3d5
    63 0000001E EC                               in al,dx                           ;高字
    64 0000001F 88C4                             mov ah,al
    65                                  
    66 00000021 664A                             dec dx                             ;0x3d4
    67 00000023 B00F                             mov al,0x0f
    68 00000025 EE                               out dx,al
    69 00000026 6642                             inc dx                             ;0x3d5
    70 00000028 EC                               in al,dx                           ;低字
    71 00000029 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 0000002C 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002F 7511                             jnz .put_0a
    75 00000031 6689D8                           mov ax,bx
    76 00000034 B350                             mov bl,80
    77 00000036 F6F3                             div bl
    78 00000038 F6E3                             mul bl
    79 0000003A 6689C3                           mov bx,ax
    80 0000003D E965000000                       jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 00000042 80F90A                           cmp cl,0x0a                        ;换行符？
    84 00000045 750A                             jnz .put_other
    85 00000047 6681C35000                       add bx,80
    86 0000004C E915000000                       jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000051 06                               push es
    90 00000052 B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
    91 00000057 8EC0                             mov es,eax
    92 00000059 66D1E3                           shl bx,1
    93 0000005C 2667880F                         mov [es:bx],cl
    94 00000060 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000061 66D1EB                           shr bx,1
    98 00000064 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 00000066 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 0000006B 7C3A                             jl .set_cursor
   103                                  
   104 0000006D 1E                               push ds
   105 0000006E 06                               push es
   106 0000006F B820000000                       mov eax,video_ram_seg_sel
   107 00000074 8ED8                             mov ds,eax
   108 00000076 8EC0                             mov es,eax
   109 00000078 FC                               cld
   110 00000079 BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d 
   111 0000007E BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx 
   112 00000083 B980070000                       mov ecx,1920
   113 00000088 F3A5                             rep movsd
   114 0000008A 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   115 0000008E B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   116                                    .cls:
   117 00000093 266766C7072007                   mov word[es:bx],0x0720
   118 0000009A 6681C30200                       add bx,2
   119 0000009F E2F2                             loop .cls
   120                                  
   121 000000A1 07                               pop es
   122 000000A2 1F                               pop ds
   123                                  
   124 000000A3 66BB8007                         mov bx,1920
   125                                  
   126                                    .set_cursor:
   127 000000A7 66BAD403                         mov dx,0x3d4
   128 000000AB B00E                             mov al,0x0e
   129 000000AD EE                               out dx,al
   130 000000AE 6642                             inc dx                             ;0x3d5
   131 000000B0 88F8                             mov al,bh
   132 000000B2 EE                               out dx,al
   133 000000B3 664A                             dec dx                             ;0x3d4
   134 000000B5 B00F                             mov al,0x0f
   135 000000B7 EE                               out dx,al
   136 000000B8 6642                             inc dx                             ;0x3d5
   137 000000BA 88D8                             mov al,bl
   138 000000BC EE                               out dx,al
   139                                  
   140 000000BD 61                               popad
   141                                           
   142 000000BE C3                               ret                                
   143                                  
   144                                  ;-------------------------------------------------------------------------------
   145                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   146                                                                              ;EAX=逻辑扇区号
   147                                                                              ;DS:EBX=目标缓冲区地址
   148                                                                              ;返回：EBX=EBX+512
   149 000000BF 50                               push eax 
   150 000000C0 51                               push ecx
   151 000000C1 52                               push edx
   152                                        
   153 000000C2 50                               push eax
   154                                           
   155 000000C3 66BAF201                         mov dx,0x1f2
   156 000000C7 B001                             mov al,1
   157 000000C9 EE                               out dx,al                          ;读取的扇区数
   158                                  
   159 000000CA 6642                             inc dx                             ;0x1f3
   160 000000CC 58                               pop eax
   161 000000CD EE                               out dx,al                          ;LBA地址7~0
   162                                  
   163 000000CE 6642                             inc dx                             ;0x1f4
   164 000000D0 B108                             mov cl,8
   165 000000D2 D3E8                             shr eax,cl
   166 000000D4 EE                               out dx,al                          ;LBA地址15~8
   167                                  
   168 000000D5 6642                             inc dx                             ;0x1f5
   169 000000D7 D3E8                             shr eax,cl
   170 000000D9 EE                               out dx,al                          ;LBA地址23~16
   171                                  
   172 000000DA 6642                             inc dx                             ;0x1f6
   173 000000DC D3E8                             shr eax,cl
   174 000000DE 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   175 000000E0 EE                               out dx,al
   176                                  
   177 000000E1 6642                             inc dx                             ;0x1f7
   178 000000E3 B020                             mov al,0x20                        ;读命令
   179 000000E5 EE                               out dx,al
   180                                  
   181                                    .waits:
   182 000000E6 EC                               in al,dx
   183 000000E7 2488                             and al,0x88
   184 000000E9 3C08                             cmp al,0x08
   185 000000EB 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   186                                  
   187 000000ED B900010000                       mov ecx,256                        ;总共要读取的字数
   188 000000F2 66BAF001                         mov dx,0x1f0
   189                                    .readw:
   190 000000F6 66ED                             in ax,dx
   191 000000F8 668903                           mov [ebx],ax
   192 000000FB 81C302000000                     add ebx,2
   193 00000101 E2F3                             loop .readw
   194                                  
   195 00000103 5A                               pop edx
   196 00000104 59                               pop ecx
   197 00000105 58                               pop eax
   198                                        
   199 00000106 CB                               retf                               ;段间返回 
   200                                  
   201                                  ;-------------------------------------------------------------------------------
   202                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   203                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   204                                                                              ;一个双字并推进光标 
   205                                                                              ;输入：EDX=要转换并显示的数字
   206                                                                              ;输出：无
   207 00000107 60                               pushad
   208 00000108 1E                               push ds
   209                                        
   210 00000109 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   211 0000010D 8ED8                             mov ds,ax
   212                                        
   213 0000010F BB[2B050000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   214 00000114 B908000000                       mov ecx,8
   215                                    .xlt:    
   216 00000119 C1C204                           rol edx,4
   217 0000011C 89D0                             mov eax,edx
   218 0000011E 250F000000                       and eax,0x0000000f
   219 00000123 D7                               xlat
   220                                        
   221 00000124 51                               push ecx
   222 00000125 88C1                             mov cl,al                           
   223 00000127 E8E8FEFFFF                       call put_char
   224 0000012C 59                               pop ecx
   225                                         
   226 0000012D E2EA                             loop .xlt
   227                                        
   228 0000012F 1F                               pop ds
   229 00000130 61                               popad
   230 00000131 CB                               retf
   231                                        
   232                                  ;-------------------------------------------------------------------------------
   233                                  allocate_memory:                            ;分配内存
   234                                                                              ;输入：ECX=希望分配的字节数
   235                                                                              ;输出：ECX=起始线性地址 
   236 00000132 1E                               push ds
   237 00000133 50                               push eax
   238 00000134 53                               push ebx
   239                                        
   240 00000135 B830000000                       mov eax,core_data_seg_sel
   241 0000013A 8ED8                             mov ds,eax
   242                                        
   243 0000013C A1[06000000]                     mov eax,[ram_alloc]
   244 00000141 01C8                             add eax,ecx                        ;下一次分配时的起始地址
   245                                        
   246                                           ;这里应当有检测可用内存数量的指令
   247                                            
   248 00000143 8B0D[06000000]                   mov ecx,[ram_alloc]                ;返回分配的起始地址
   249                                  
   250 00000149 89C3                             mov ebx,eax
   251 0000014B 81E3FCFFFFFF                     and ebx,0xfffffffc
   252 00000151 81C304000000                     add ebx,4                          ;强制对齐 
   253 00000157 A903000000                       test eax,0x00000003                ;下次分配的起始地址最好是4字节对齐
   254 0000015C 0F45C3                           cmovnz eax,ebx                     ;如果没有对齐，则强制对齐 
   255 0000015F A3[06000000]                     mov [ram_alloc],eax                ;下次从该地址分配内存
   256                                                                              ;cmovcc指令可以避免控制转移 
   257 00000164 5B                               pop ebx
   258 00000165 58                               pop eax
   259 00000166 1F                               pop ds
   260                                  
   261 00000167 CB                               retf
   262                                  
   263                                  ;-------------------------------------------------------------------------------
   264                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   265                                                                              ;输入：EDX:EAX=描述符 
   266                                                                              ;输出：CX=描述符的选择子
   267 00000168 50                               push eax
   268 00000169 53                               push ebx
   269 0000016A 52                               push edx
   270                                  
   271 0000016B 1E                               push ds
   272 0000016C 06                               push es
   273                                  
   274 0000016D BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   275 00000172 8EDB                             mov ds,ebx
   276                                  
   277 00000174 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   278                                  
   279 0000017B BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   280 00000180 8EC3                             mov es,ebx
   281                                  
   282 00000182 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   283 00000189 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   284 0000018B 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   285                                  
   286 00000191 268903                           mov [es:ebx],eax
   287 00000194 26895304                         mov [es:ebx+4],edx
   288                                  
   289 00000198 668105[00000000]08-              add word [pgdt],8                  ;增加一个描述符的大小
   290 000001A0 00                 
   291                                  
   292 000001A1 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   293                                  
   294 000001A8 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   295 000001AE 6631D2                           xor dx,dx
   296 000001B1 66BB0800                         mov bx,8
   297 000001B5 66F7F3                           div bx                             ;除以8，去掉余数
   298 000001B8 6689C1                           mov cx,ax
   299 000001BB 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   300                                  
   301 000001BF 07                               pop es
   302 000001C0 1F                               pop ds
   303                                  
   304 000001C1 5A                               pop edx
   305 000001C2 5B                               pop ebx
   306 000001C3 58                               pop eax
   307                                  
   308 000001C4 CB                               retf
   309                                  ;-------------------------------------------------------------------------------
   310                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   311                                                                              ;输入：EAX=线性基地址
   312                                                                              ;      EBX=段界限
   313                                                                              ;      ECX=属性。各属性位都在原始
   314                                                                              ;          位置，无关的位清零 
   315                                                                              ;返回：EDX:EAX=描述符
   316 000001C5 89C2                             mov edx,eax
   317 000001C7 C1E010                           shl eax,16
   318 000001CA 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   319                                  
   320 000001CD 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   321 000001D3 C1C208                           rol edx,8
   322 000001D6 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   323                                  
   324 000001D8 6631DB                           xor bx,bx
   325 000001DB 09DA                             or edx,ebx                         ;装配段界限的高4位
   326                                  
   327 000001DD 09CA                             or edx,ecx                         ;装配属性
   328                                  
   329 000001DF CB                               retf
   330                                  
   331                                  ;-------------------------------------------------------------------------------
   332                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   333                                                                              ;输入：EAX=门代码在段内偏移地址
   334                                                                              ;       BX=门代码所在段的选择子 
   335                                                                              ;       CX=段类型及属性等（各属
   336                                                                              ;          性位都在原始位置）
   337                                                                              ;返回：EDX:EAX=完整的描述符
   338 000001E0 53                               push ebx
   339 000001E1 51                               push ecx
   340                                        
   341 000001E2 89C2                             mov edx,eax
   342 000001E4 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   343 000001EA 6609CA                           or dx,cx                           ;组装属性部分到EDX
   344                                         
   345 000001ED 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   346 000001F2 C1E310                           shl ebx,16                          
   347 000001F5 09D8                             or eax,ebx                         ;组装段选择子部分
   348                                        
   349 000001F7 59                               pop ecx
   350 000001F8 5B                               pop ebx
   351                                        
   352 000001F9 CB                               retf                                   
   353                                                               
   354                                  sys_routine_end:
   355                                  
   356                                  ;===============================================================================
   357                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   358                                  ;------------------------------------------------------------------------------- 
   359 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   360 00000002 00000000                                          dd  0
   361                                  
   362 00000006 00001000                         ram_alloc        dd  0x00100000    ;下次分配内存时的起始地址
   363                                  
   364                                           ;符号地址检索表
   365                                           salt:
   366 0000000A 405072696E74537472-              salt_1           db  '@PrintString'
   367 00000013 696E67             
   368 00000016 00<rept>                                     times 256-($-salt_1) db 0
   369 0000010A [00000000]                                        dd  put_string
   370 0000010E 2800                                              dw  sys_routine_seg_sel
   371                                  
   372 00000110 40526561644469736B-              salt_2           db  '@ReadDiskData'
   373 00000119 44617461           
   374 0000011D 00<rept>                                     times 256-($-salt_2) db 0
   375 00000210 [BF000000]                                        dd  read_hard_disk_0
   376 00000214 2800                                              dw  sys_routine_seg_sel
   377                                  
   378 00000216 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   379 0000021F 726441734865785374-
   380 00000228 72696E67           
   381 0000022C 00<rept>                                     times 256-($-salt_3) db 0
   382 00000316 [07010000]                                        dd  put_hex_dword
   383 0000031A 2800                                              dw  sys_routine_seg_sel
   384                                  
   385 0000031C 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   386 00000325 6550726F6772616D   
   387 0000032D 00<rept>                                     times 256-($-salt_4) db 0
   388 0000041C [D7040000]                                        dd  return_point
   389 00000420 3800                                              dw  core_code_seg_sel
   390                                  
   391                                           salt_item_len   equ $-salt_4
   392                                           salt_items      equ ($-salt)/salt_item_len
   393                                  
   394 00000422 2020496620796F7520-              message_1        db  '  If you seen this message,that means we '
   395 0000042B 7365656E2074686973-
   396 00000434 206D6573736167652C-
   397 0000043D 74686174206D65616E-
   398 00000446 7320776520         
   399 0000044B 617265206E6F772069-                               db  'are now in protect mode,and the system '
   400 00000454 6E2070726F74656374-
   401 0000045D 206D6F64652C616E64-
   402 00000466 207468652073797374-
   403 0000046F 656D20             
   404 00000472 636F7265206973206C-                               db  'core is loaded,and the video display '
   405 0000047B 6F616465642C616E64-
   406 00000484 207468652076696465-
   407 0000048D 6F20646973706C6179-
   408 00000496 20                 
   409 00000497 726F7574696E652077-                               db  'routine works perfectly.',0x0d,0x0a,0
   410 000004A0 6F726B732070657266-
   411 000004A9 6563746C792E0D0A00 
   412                                  
   413 000004B2 202053797374656D20-              message_2        db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   414 000004BB 776964652043414C4C-
   415 000004C4 2D47415445206D6F75-
   416 000004CD 6E7465642E0D0A00   
   417                                           
   418 000004D5 0D0A20204C6F616469-              message_3        db  0x0d,0x0a,'  Loading user program...',0
   419 000004DE 6E6720757365722070-
   420 000004E7 726F6772616D2E2E2E-
   421 000004F0 00                 
   422                                           
   423 000004F1 446F6E652E0D0A00                 do_status        db  'Done.',0x0d,0x0a,0
   424                                           
   425 000004F9 0D0A0D0A0D0A                     message_6        db  0x0d,0x0a,0x0d,0x0a,0x0d,0x0a
   426 000004FF 202055736572207072-                               db  '  User program terminated,control returned.',0
   427 00000508 6F6772616D20746572-
   428 00000511 6D696E617465642C63-
   429 0000051A 6F6E74726F6C207265-
   430 00000523 7475726E65642E00   
   431                                  
   432 0000052B 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   433 00000534 39414243444546     
   434                                                                              ;put_hex_dword子过程用的查找表 
   435                                  
   436 0000053B 00<rept>                         core_buf   times 2048 db 0         ;内核用的缓冲区
   437                                  
   438 00000D3B 00000000                         esp_pointer      dd 0              ;内核用来临时保存自己的栈指针     
   439                                  
   440 00000D3F 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   441 00000D44 00<rept>                         cpu_brand  times 52 db 0
   442 00000D78 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   443                                  
   444                                           ;任务控制块链
   445 00000D7D 00000000                         tcb_chain        dd  0
   446                                  
   447                                  core_data_end:
   448                                                 
   449                                  ;===============================================================================
   450                                  SECTION core_code vstart=0
   451                                  ;-------------------------------------------------------------------------------
   452                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   453                                                                              ;输入：EDX:EAX=描述符
   454                                                                              ;          EBX=TCB基地址
   455                                                                              ;输出：CX=描述符的选择子
   456 00000000 50                               push eax
   457 00000001 52                               push edx
   458 00000002 57                               push edi
   459 00000003 1E                               push ds
   460                                  
   461 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   462 00000009 8ED9                             mov ds,ecx
   463                                  
   464 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   465                                           
   466 0000000E 31C9                             xor ecx,ecx
   467 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   468 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   469                                           
   470 00000016 89040F                           mov [edi+ecx+0x00],eax
   471 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   472                                  
   473 0000001D 6681C10800                       add cx,8                           
   474 00000022 6649                             dec cx                             ;得到新的LDT界限值 
   475                                  
   476 00000024 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   477                                  
   478 00000028 6689C8                           mov ax,cx
   479 0000002B 6631D2                           xor dx,dx
   480 0000002E 66B90800                         mov cx,8
   481 00000032 66F7F1                           div cx
   482                                           
   483 00000035 6689C1                           mov cx,ax
   484 00000038 66C1E103                         shl cx,3                           ;左移3位，并且
   485 0000003C 6681C90400                       or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   486                                  
   487 00000041 1F                               pop ds
   488 00000042 5F                               pop edi
   489 00000043 5A                               pop edx
   490 00000044 58                               pop eax
   491                                       
   492 00000045 C3                               ret
   493                                        
   494                                  ;------------------------------------------------------------------------------- 
   495                                  load_relocate_program:                      ;加载并重定位用户程序
   496                                                                              ;输入: PUSH 逻辑扇区号
   497                                                                              ;      PUSH 任务控制块基地址
   498                                                                              ;输出：无 
   499 00000046 60                               pushad
   500                                        
   501 00000047 1E                               push ds
   502 00000048 06                               push es
   503                                        
   504 00000049 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   505                                        
   506 0000004B B908000000                       mov ecx,mem_0_4_gb_seg_sel
   507 00000050 8EC1                             mov es,ecx
   508                                        
   509 00000052 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   510                                  
   511                                           ;以下申请创建LDT所需要的内存
   512 00000055 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   513 0000005A 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   514 00000061 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   515 00000065 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   516                                  
   517                                           ;以下开始加载用户程序 
   518 0000006C B830000000                       mov eax,core_data_seg_sel
   519 00000071 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   520                                         
   521 00000073 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   522 00000076 BB[3B050000]                     mov ebx,core_buf                   ;读取程序头部数据     
   523 0000007B 9A[BF000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   524                                  
   525                                           ;以下判断整个程序有多大
   526 00000082 A1[3B050000]                     mov eax,[core_buf]                 ;程序尺寸
   527 00000087 89C3                             mov ebx,eax
   528 00000089 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   529 0000008F 81C300020000                     add ebx,512                        ;9位都为0 
   530 00000095 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   531 0000009A 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   532                                        
   533 0000009D 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   534 0000009F 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   535 000000A6 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中
   536                                        
   537 000000AA 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   538 000000AC 31D2                             xor edx,edx
   539 000000AE B900020000                       mov ecx,512
   540 000000B3 F7F1                             div ecx
   541 000000B5 89C1                             mov ecx,eax                        ;总扇区数 
   542                                        
   543 000000B7 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   544 000000BC 8ED8                             mov ds,eax
   545                                  
   546 000000BE 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   547                                    .b1:
   548 000000C1 9A[BF000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   549 000000C8 40                               inc eax
   550 000000C9 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   551                                  
   552 000000CB 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   553                                  
   554                                           ;建立程序头部段描述符
   555 000000CF 89F8                             mov eax,edi                        ;程序头部起始线性地址
   556 000000D1 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   557 000000D4 4B                               dec ebx                            ;段界限
   558 000000D5 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3 
   559 000000DA 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   560                                        
   561                                           ;安装头部段描述符到LDT中 
   562 000000E1 89F3                             mov ebx,esi                        ;TCB的基地址
   563 000000E3 E818FFFFFF                       call fill_descriptor_in_ldt
   564                                  
   565 000000E8 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   566 000000ED 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   567 000000F2 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   568                                        
   569                                           ;建立程序代码段描述符
   570 000000F6 89F8                             mov eax,edi
   571 000000F8 034714                           add eax,[edi+0x14]                 ;代码起始线性地址
   572 000000FB 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   573 000000FE 4B                               dec ebx                            ;段界限
   574 000000FF B900F84000                       mov ecx,0x0040f800                 ;字节粒度的代码段描述符，特权级3
   575 00000104 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   576 0000010B 89F3                             mov ebx,esi                        ;TCB的基地址
   577 0000010D E8EEFEFFFF                       call fill_descriptor_in_ldt
   578 00000112 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   579 00000117 66894F14                         mov [edi+0x14],cx                  ;登记代码段选择子到头部
   580                                  
   581                                           ;建立程序数据段描述符
   582 0000011B 89F8                             mov eax,edi
   583 0000011D 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   584 00000120 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   585 00000123 4B                               dec ebx                            ;段界限 
   586 00000124 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3
   587 00000129 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   588 00000130 89F3                             mov ebx,esi                        ;TCB的基地址
   589 00000132 E8C9FEFFFF                       call fill_descriptor_in_ldt
   590 00000137 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   591 0000013C 66894F1C                         mov [edi+0x1c],cx                  ;登记数据段选择子到头部
   592                                  
   593                                           ;建立程序堆栈段描述符
   594 00000140 8B4F0C                           mov ecx,[edi+0x0c]                 ;4KB的倍率 
   595 00000143 BBFFFF0F00                       mov ebx,0x000fffff
   596 00000148 29CB                             sub ebx,ecx                        ;得到段界限
   597 0000014A B800100000                       mov eax,4096                        
   598 0000014F F7E1                             mul ecx                         
   599 00000151 89C1                             mov ecx,eax                        ;准备为堆栈分配内存 
   600 00000153 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   601 0000015A 01C8                             add eax,ecx                        ;得到堆栈的高端物理地址 
   602 0000015C B900F6C000                       mov ecx,0x00c0f600                 ;字节粒度的堆栈段描述符，特权级3
   603 00000161 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   604 00000168 89F3                             mov ebx,esi                        ;TCB的基地址
   605 0000016A E891FEFFFF                       call fill_descriptor_in_ldt
   606 0000016F 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   607 00000174 66894F08                         mov [edi+0x08],cx                  ;登记堆栈段选择子到头部
   608                                  
   609                                           ;重定位SALT 
   610 00000178 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   611 0000017D 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   612                                                                              ;过4GB段访问用户程序头部          
   613 0000017F B830000000                       mov eax,core_data_seg_sel
   614 00000184 8ED8                             mov ds,eax
   615                                        
   616 00000186 FC                               cld
   617                                  
   618 00000187 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   619 0000018B 81C728000000                     add edi,0x28                       ;U-SALT在4GB段内的偏移 
   620                                    .b2: 
   621 00000191 51                               push ecx
   622 00000192 57                               push edi
   623                                        
   624 00000193 B904000000                       mov ecx,salt_items
   625 00000198 BE[0A000000]                     mov esi,salt
   626                                    .b3:
   627 0000019D 57                               push edi
   628 0000019E 56                               push esi
   629 0000019F 51                               push ecx
   630                                  
   631 000001A0 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   632 000001A5 F3A7                             repe cmpsd                         ;每次比较4字节 
   633 000001A7 7519                             jnz .b4
   634 000001A9 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   635 000001AB 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   636 000001B2 668B4604                         mov ax,[esi+4]
   637 000001B6 660D0300                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   638                                                                              ;故RPL=3 
   639 000001BA 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   640                                    .b4:
   641                                        
   642 000001C2 59                               pop ecx
   643 000001C3 5E                               pop esi
   644 000001C4 81C606010000                     add esi,salt_item_len
   645 000001CA 5F                               pop edi                            ;从头比较 
   646 000001CB E2D0                             loop .b3
   647                                        
   648 000001CD 5F                               pop edi
   649 000001CE 81C700010000                     add edi,256
   650 000001D4 59                               pop ecx
   651 000001D5 E2BA                             loop .b2
   652                                  
   653 000001D7 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   654                                  
   655                                           ;创建0特权级堆栈
   656 000001DA B900100000                       mov ecx,4096
   657 000001DF 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备 
   658 000001E1 26894E1A                         mov [es:esi+0x1a],ecx
   659 000001E5 26C16E1A0C                       shr dword [es:esi+0x1a],12         ;登记0特权级堆栈尺寸到TCB 
   660 000001EA 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   661 000001F1 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   662 000001F3 2689461E                         mov [es:esi+0x1e],eax              ;登记0特权级堆栈基地址到TCB 
   663 000001F7 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   664 000001FC B90096C000                       mov ecx,0x00c09600                 ;4KB粒度，读写，特权级0
   665 00000201 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   666 00000208 89F3                             mov ebx,esi                        ;TCB的基地址
   667 0000020A E8F1FDFFFF                       call fill_descriptor_in_ldt
   668                                           ;or cx,0000_0000_0000_0000          ;设置选择子的特权级为0
   669 0000020F 2666894E22                       mov [es:esi+0x22],cx               ;登记0特权级堆栈选择子到TCB
   670 00000214 26C7462400000000                 mov dword [es:esi+0x24],0          ;登记0特权级堆栈初始ESP到TCB
   671                                        
   672                                           ;创建1特权级堆栈
   673 0000021C B900100000                       mov ecx,4096
   674 00000221 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   675 00000223 26894E28                         mov [es:esi+0x28],ecx
   676 00000227 26C06E280C                       shr [es:esi+0x28],12               ;登记1特权级堆栈尺寸到TCB
   677 0000022C 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   678 00000233 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   679 00000235 2689462C                         mov [es:esi+0x2c],eax              ;登记1特权级堆栈基地址到TCB
   680 00000239 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   681 0000023E B900B6C000                       mov ecx,0x00c0b600                 ;4KB粒度，读写，特权级1
   682 00000243 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   683 0000024A 89F3                             mov ebx,esi                        ;TCB的基地址
   684 0000024C E8AFFDFFFF                       call fill_descriptor_in_ldt
   685 00000251 6681C90100                       or cx,0000_0000_0000_0001          ;设置选择子的特权级为1
   686 00000256 2666894E30                       mov [es:esi+0x30],cx               ;登记1特权级堆栈选择子到TCB
   687 0000025B 26C7463200000000                 mov dword [es:esi+0x32],0          ;登记1特权级堆栈初始ESP到TCB
   688                                  
   689                                           ;创建2特权级堆栈
   690 00000263 B900100000                       mov ecx,4096
   691 00000268 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   692 0000026A 26894E36                         mov [es:esi+0x36],ecx
   693 0000026E 26C06E360C                       shr [es:esi+0x36],12               ;登记2特权级堆栈尺寸到TCB
   694 00000273 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   695 0000027A 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   696 0000027C 26894E3A                         mov [es:esi+0x3a],ecx              ;登记2特权级堆栈基地址到TCB
   697 00000280 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   698 00000285 B900D6C000                       mov ecx,0x00c0d600                 ;4KB粒度，读写，特权级2
   699 0000028A 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   700 00000291 89F3                             mov ebx,esi                        ;TCB的基地址
   701 00000293 E868FDFFFF                       call fill_descriptor_in_ldt
   702 00000298 6681C90A00                       or cx,0000_0000_0000_0010          ;设置选择子的特权级为2
   703 0000029D 2666894E3E                       mov [es:esi+0x3e],cx               ;登记2特权级堆栈选择子到TCB
   704 000002A2 26C7464000000000                 mov dword [es:esi+0x40],0          ;登记2特权级堆栈初始ESP到TCB
   705                                        
   706                                           ;在GDT中登记LDT描述符
   707 000002AA 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   708 000002AE 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   709 000002B3 B900824000                       mov ecx,0x00408200                 ;LDT描述符，特权级0
   710 000002B8 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   711 000002BF 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   712 000002C6 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   713                                         
   714                                           ;创建用户程序的TSS
   715 000002CB B968000000                       mov ecx,104                        ;tss的基本尺寸
   716 000002D0 2666894E12                       mov [es:esi+0x12],cx              
   717 000002D5 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB 
   718 000002DA 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   719 000002E1 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
   720                                        
   721                                           ;登记基本的TSS表格内容
   722 000002E5 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   723                                        
   724 000002EB 268B5624                         mov edx,[es:esi+0x24]              ;登记0特权级堆栈初始ESP
   725 000002EF 26895104                         mov [es:ecx+4],edx                 ;到TSS中
   726                                        
   727 000002F3 26668B5622                       mov dx,[es:esi+0x22]               ;登记0特权级堆栈段选择子
   728 000002F8 2666895108                       mov [es:ecx+8],dx                  ;到TSS中
   729                                        
   730 000002FD 268B5632                         mov edx,[es:esi+0x32]              ;登记1特权级堆栈初始ESP
   731 00000301 2689510C                         mov [es:ecx+12],edx                ;到TSS中
   732                                  
   733 00000305 26668B5630                       mov dx,[es:esi+0x30]               ;登记1特权级堆栈段选择子
   734 0000030A 2666895110                       mov [es:ecx+16],dx                 ;到TSS中
   735                                  
   736 0000030F 268B5640                         mov edx,[es:esi+0x40]              ;登记2特权级堆栈初始ESP
   737 00000313 26895114                         mov [es:ecx+20],edx                ;到TSS中
   738                                  
   739 00000317 26668B563E                       mov dx,[es:esi+0x3e]               ;登记2特权级堆栈段选择子
   740 0000031C 2666895118                       mov [es:ecx+24],dx                 ;到TSS中
   741                                  
   742 00000321 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
   743 00000326 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
   744                                        
   745 0000032B 26668B5612                       mov dx,[es:esi+0x12]               ;登记任务的I/O位图偏移
   746 00000330 2666895166                       mov [es:ecx+102],dx                ;到TSS中 
   747                                        
   748 00000335 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   749                                         
   750                                           ;在GDT中登记TSS描述符
   751 0000033C 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
   752 00000340 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   753 00000345 B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
   754 0000034A 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   755 00000351 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   756 00000358 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   757                                  
   758 0000035D 07                               pop es                             ;恢复到调用此过程前的es段 
   759 0000035E 1F                               pop ds                             ;恢复到调用此过程前的ds段
   760                                        
   761 0000035F 61                               popad
   762                                        
   763 00000360 C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   764                                        
   765                                  ;-------------------------------------------------------------------------------
   766                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   767                                                                              ;输入：ECX=TCB线性基地址
   768 00000363 50                               push eax
   769 00000364 52                               push edx
   770 00000365 1E                               push ds
   771 00000366 06                               push es
   772                                           
   773 00000367 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   774 0000036C 8ED8                             mov ds,eax
   775 0000036E B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   776 00000373 8EC0                             mov es,eax
   777                                           
   778 00000375 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   779                                                                              ;后一个TCB
   780                                                                               
   781 0000037C A1[7D0D0000]                     mov eax,[tcb_chain]                ;TCB表头指针
   782 00000381 09C0                             or eax,eax                         ;链表为空？
   783 00000383 7411                             jz .notcb 
   784                                           
   785                                    .searc:
   786 00000385 89C2                             mov edx,eax
   787 00000387 268B02                           mov eax,[es: edx+0x00]
   788 0000038A 09C0                             or eax,eax               
   789 0000038C 75F7                             jnz .searc
   790                                           
   791 0000038E 26890A                           mov [es: edx+0x00],ecx
   792 00000391 E906000000                       jmp .retpc
   793                                           
   794                                    .notcb:       
   795 00000396 890D[7D0D0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   796                                           
   797                                    .retpc:
   798 0000039C 07                               pop es
   799 0000039D 1F                               pop ds
   800 0000039E 5A                               pop edx
   801 0000039F 58                               pop eax
   802                                           
   803 000003A0 C3                               ret
   804                                           
   805                                  ;-------------------------------------------------------------------------------
   806                                  start:
   807 000003A1 B930000000                       mov ecx,core_data_seg_sel          ;使ds指向核心数据段 
   808 000003A6 8ED9                             mov ds,ecx
   809                                  
   810 000003A8 BB[22040000]                     mov ebx,message_1                    
   811 000003AD 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   812                                                                           
   813                                           ;显示处理器品牌信息 
   814 000003B4 B802000080                       mov eax,0x80000002
   815 000003B9 0FA2                             cpuid
   816 000003BB A3[440D0000]                     mov [cpu_brand + 0x00],eax
   817 000003C0 891D[480D0000]                   mov [cpu_brand + 0x04],ebx
   818 000003C6 890D[4C0D0000]                   mov [cpu_brand + 0x08],ecx
   819 000003CC 8915[500D0000]                   mov [cpu_brand + 0x0c],edx
   820                                        
   821 000003D2 B803000080                       mov eax,0x80000003
   822 000003D7 0FA2                             cpuid
   823 000003D9 A3[540D0000]                     mov [cpu_brand + 0x10],eax
   824 000003DE 891D[580D0000]                   mov [cpu_brand + 0x14],ebx
   825 000003E4 890D[5C0D0000]                   mov [cpu_brand + 0x18],ecx
   826 000003EA 8915[600D0000]                   mov [cpu_brand + 0x1c],edx
   827                                  
   828 000003F0 B804000080                       mov eax,0x80000004
   829 000003F5 0FA2                             cpuid
   830 000003F7 A3[640D0000]                     mov [cpu_brand + 0x20],eax
   831 000003FC 891D[680D0000]                   mov [cpu_brand + 0x24],ebx
   832 00000402 890D[6C0D0000]                   mov [cpu_brand + 0x28],ecx
   833 00000408 8915[700D0000]                   mov [cpu_brand + 0x2c],edx
   834                                  
   835 0000040E BB[3F0D0000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   836 00000413 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   837 0000041A BB[440D0000]                     mov ebx,cpu_brand
   838 0000041F 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   839 00000426 BB[780D0000]                     mov ebx,cpu_brnd1
   840 0000042B 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   841                                  
   842                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   843 00000432 BF[0A000000]                     mov edi,salt                       ;C-SALT表的起始位置 
   844 00000437 B904000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
   845                                    .b3:
   846 0000043C 51                               push ecx   
   847 0000043D 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
   848 00000443 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
   849 0000044A 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
   850                                                                              ;允许访问)，0个参数(因为用寄存器
   851                                                                              ;传递参数，而没有用栈) 
   852 0000044E 9A[E0010000]2800                 call sys_routine_seg_sel:make_gate_descriptor
   853 00000455 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   854 0000045C 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
   855 00000463 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
   856 00000469 59                               pop ecx
   857 0000046A E2D0                             loop .b3
   858                                  
   859                                           ;对门进行测试 
   860 0000046C BB[B2040000]                     mov ebx,message_2
   861 00000471 FF1D[0A010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
   862                                        
   863 00000477 BB[D5040000]                     mov ebx,message_3                    
   864 0000047C 9A[00000000]2800                 call sys_routine_seg_sel:put_string ;在内核中调用例程不需要通过门
   865                                        
   866                                           ;创建任务控制块。这不是处理器的要求，而是我们自己为了方便而设立的
   867 00000483 B946000000                       mov ecx,0x46
   868 00000488 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   869 0000048F E8CFFEFFFF                       call append_to_tcb_link            ;将任务控制块追加到TCB链表 
   870                                        
   871 00000494 6832000000                       push dword 50                      ;用户程序位于逻辑50扇区
   872 00000499 51                               push ecx                           ;压入任务控制块起始线性地址 
   873                                         
   874 0000049A E8A7FBFFFF                       call load_relocate_program
   875                                        
   876 0000049F BB[F1040000]                     mov ebx,do_status
   877 000004A4 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   878                                        
   879 000004AB B808000000                       mov eax,mem_0_4_gb_seg_sel
   880 000004B0 8ED8                             mov ds,eax
   881                                        
   882 000004B2 0F005918                         ltr [ecx+0x18]                     ;加载任务状态段 
   883 000004B6 0F005110                         lldt [ecx+0x10]                    ;加载LDT
   884                                        
   885 000004BA 8B4144                           mov eax,[ecx+0x44]
   886 000004BD 8ED8                             mov ds,eax                         ;切换到用户程序头部段 
   887                                  
   888                                           ;以下假装是从调用门返回。摹仿处理器压入返回参数 
   889 000004BF FF3508000000                     push dword [0x08]                  ;调用前的堆栈段选择子
   890 000004C5 6800000000                       push dword 0                       ;调用前的esp
   891                                  
   892 000004CA FF3514000000                     push dword [0x14]                  ;调用前的代码段选择子 
   893 000004D0 FF3510000000                     push dword [0x10]                  ;调用前的eip
   894                                        
   895 000004D6 CB                               retf
   896                                  
   897                                  return_point:                               ;用户程序返回点
   898 000004D7 B830000000                       mov eax,core_data_seg_sel          ;因为c14.asm是以JMP的方式使用调 
   899 000004DC 8ED8                             mov ds,eax                         ;用门@TerminateProgram，回到这 
   900                                                                              ;里时，特权级为3，会导致异常。 
   901 000004DE BB[F9040000]                     mov ebx,message_6
   902 000004E3 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   903                                  
   904 000004EA F4                               hlt
   905                                              
   906                                  core_code_end:
   907                                  
   908                                  ;-------------------------------------------------------------------------------
   909                                  SECTION core_trail
   910                                  ;-------------------------------------------------------------------------------
   911                                  core_end:
