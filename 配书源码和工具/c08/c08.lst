     1                                           ;代码清单8-2
     2                                           ;文件名：c08.asm
     3                                           ;文件说明：用户程序 
     4                                           ;创建日期：2011-5-5 18:17
     5                                           
     6                                  ;===============================================================================
     7                                  SECTION header vstart=0                     ;定义用户程序头部段 
     8 00000000 [00000000]                  program_length  dd program_end          ;程序总长度[0x00]
     9                                      
    10                                      ;用户程序入口点
    11 00000004 [A000]                      code_entry      dw start                ;偏移地址[0x04]
    12 00000006 [00000000]                                  dd section.code_1.start ;段地址[0x06] 
    13                                      
    14 0000000A 0500                        realloc_tbl_len dw (header_end-code_1_segment)/4
    15                                                                              ;段重定位表项个数[0x0a]
    16                                      
    17                                      ;段重定位表           
    18 0000000C [00000000]                  code_1_segment  dd section.code_1.start ;[0x0c]
    19 00000010 [00000000]                  code_2_segment  dd section.code_2.start ;[0x10]
    20 00000014 [00000000]                  data_1_segment  dd section.data_1.start ;[0x14]
    21 00000018 [00000000]                  data_2_segment  dd section.data_2.start ;[0x18]
    22 0000001C [00000000]                  stack_segment   dd section.stack.start  ;[0x1c]
    23                                      
    24                                      header_end:                
    25                                      
    26                                  ;===============================================================================
    27                                  SECTION code_1 align=16 vstart=0         ;定义代码段1（16字节对齐） 
    28                                  put_string:                              ;显示串(0结尾)。
    29                                                                           ;输入：DS:BX=串地址
    30 00000000 8A0F                             mov cl,[bx]
    31 00000002 08C9                             or cl,cl                        ;cl=0 ?
    32 00000004 7406                             jz .exit                        ;是的，返回主程序 
    33 00000006 E80400                           call put_char
    34 00000009 43                               inc bx                          ;下一个字符 
    35 0000000A EBF4                             jmp put_string
    36                                  
    37                                     .exit:
    38 0000000C C3                               ret
    39                                  
    40                                  ;-------------------------------------------------------------------------------
    41                                  put_char:                                ;显示一个字符
    42                                                                           ;输入：cl=字符ascii
    43 0000000D 50                               push ax
    44 0000000E 53                               push bx
    45 0000000F 51                               push cx
    46 00000010 52                               push dx
    47 00000011 1E                               push ds
    48 00000012 06                               push es
    49                                  
    50                                           ;以下取当前光标位置
    51 00000013 BAD403                           mov dx,0x3d4
    52 00000016 B00E                             mov al,0x0e
    53 00000018 EE                               out dx,al
    54 00000019 BAD503                           mov dx,0x3d5
    55 0000001C EC                               in al,dx                        ;高8位 
    56 0000001D 88C4                             mov ah,al
    57                                  
    58 0000001F BAD403                           mov dx,0x3d4
    59 00000022 B00F                             mov al,0x0f
    60 00000024 EE                               out dx,al
    61 00000025 BAD503                           mov dx,0x3d5
    62 00000028 EC                               in al,dx                        ;低8位 
    63 00000029 89C3                             mov bx,ax                       ;BX=代表光标位置的16位数
    64                                  
    65 0000002B 80F90D                           cmp cl,0x0d                     ;回车符？
    66 0000002E 750C                             jnz .put_0a                     ;不是。看看是不是换行等字符 
    67 00000030 89D8                             mov ax,bx                       ;此句略显多余，但去掉后还得改书，麻烦 
    68 00000032 B350                             mov bl,80                       
    69 00000034 F6F3                             div bl
    70 00000036 F6E3                             mul bl
    71 00000038 89C3                             mov bx,ax
    72 0000003A EB45                             jmp .set_cursor
    73                                  
    74                                   .put_0a:
    75 0000003C 80F90A                           cmp cl,0x0a                     ;换行符？
    76 0000003F 7505                             jnz .put_other                  ;不是，那就正常显示字符 
    77 00000041 83C350                           add bx,80
    78 00000044 EB0F                             jmp .roll_screen
    79                                  
    80                                   .put_other:                             ;正常显示字符
    81 00000046 B800B8                           mov ax,0xb800
    82 00000049 8EC0                             mov es,ax
    83 0000004B D1E3                             shl bx,1
    84 0000004D 26880F                           mov [es:bx],cl
    85                                  
    86                                           ;以下将光标位置推进一个字符
    87 00000050 D1EB                             shr bx,1
    88 00000052 83C301                           add bx,1
    89                                  
    90                                   .roll_screen:
    91 00000055 81FBD007                         cmp bx,2000                     ;光标超出屏幕？滚屏
    92 00000059 7C26                             jl .set_cursor
    93                                  
    94 0000005B B800B8                           mov ax,0xb800
    95 0000005E 8ED8                             mov ds,ax
    96 00000060 8EC0                             mov es,ax
    97 00000062 FC                               cld
    98 00000063 BEA000                           mov si,0xa0
    99 00000066 BF0000                           mov di,0x00
   100 00000069 B98007                           mov cx,1920
   101 0000006C F3A5                             rep movsw
   102 0000006E BB000F                           mov bx,3840                     ;清除屏幕最底一行
   103 00000071 B95000                           mov cx,80
   104                                   .cls:
   105 00000074 26C7072007                       mov word[es:bx],0x0720
   106 00000079 83C302                           add bx,2
   107 0000007C E2F6                             loop .cls
   108                                  
   109 0000007E BB8007                           mov bx,1920
   110                                  
   111                                   .set_cursor:
   112 00000081 BAD403                           mov dx,0x3d4
   113 00000084 B00E                             mov al,0x0e
   114 00000086 EE                               out dx,al
   115 00000087 BAD503                           mov dx,0x3d5
   116 0000008A 88F8                             mov al,bh
   117 0000008C EE                               out dx,al
   118 0000008D BAD403                           mov dx,0x3d4
   119 00000090 B00F                             mov al,0x0f
   120 00000092 EE                               out dx,al
   121 00000093 BAD503                           mov dx,0x3d5
   122 00000096 88D8                             mov al,bl
   123 00000098 EE                               out dx,al
   124                                  
   125 00000099 07                               pop es
   126 0000009A 1F                               pop ds
   127 0000009B 5A                               pop dx
   128 0000009C 59                               pop cx
   129 0000009D 5B                               pop bx
   130 0000009E 58                               pop ax
   131                                  
   132 0000009F C3                               ret
   133                                  
   134                                  ;-------------------------------------------------------------------------------
   135                                    start:
   136                                           ;初始执行时，DS和ES指向用户程序头部段
   137 000000A0 A1[1C00]                         mov ax,[stack_segment]           ;设置到用户程序自己的堆栈 
   138 000000A3 8ED0                             mov ss,ax
   139 000000A5 BC[0001]                         mov sp,stack_end
   140                                           
   141 000000A8 A1[1400]                         mov ax,[data_1_segment]          ;设置到用户程序自己的数据段
   142 000000AB 8ED8                             mov ds,ax
   143                                  
   144 000000AD BB[0000]                         mov bx,msg0
   145 000000B0 E84DFF                           call put_string                  ;显示第一段信息 
   146                                  
   147 000000B3 26FF36[1000]                     push word [es:code_2_segment]
   148 000000B8 B8[0000]                         mov ax,begin
   149 000000BB 50                               push ax                          ;可以直接push begin,80386+
   150                                           
   151 000000BC CB                               retf                             ;转移到代码段2执行 
   152                                           
   153                                    continue:
   154 000000BD 26A1[1800]                       mov ax,[es:data_2_segment]       ;段寄存器DS切换到数据段2 
   155 000000C1 8ED8                             mov ds,ax
   156                                           
   157 000000C3 BB[0000]                         mov bx,msg1
   158 000000C6 E837FF                           call put_string                  ;显示第二段信息 
   159                                  
   160 000000C9 EBFE                             jmp $ 
   161                                  
   162                                  ;===============================================================================
   163                                  SECTION code_2 align=16 vstart=0          ;定义代码段2（16字节对齐）
   164                                  
   165                                    begin:
   166 00000000 26FF36[0C00]                     push word [es:code_1_segment]
   167 00000005 B8[BD00]                         mov ax,continue
   168 00000008 50                               push ax                          ;可以直接push continue,80386+
   169                                           
   170 00000009 CB                               retf                             ;转移到代码段1接着执行 
   171                                           
   172                                  ;===============================================================================
   173                                  SECTION data_1 align=16 vstart=0
   174                                  
   175 00000000 202054686973206973-         msg0 db '  This is NASM - the famous Netwide Assembler. '
   176 00000009 204E41534D202D2074-
   177 00000012 68652066616D6F7573-
   178 0000001B 204E65747769646520-
   179 00000024 417373656D626C6572-
   180 0000002D 2E20               
   181 0000002F 4261636B2061742053-              db 'Back at SourceForge and in intensive development! '
   182 00000038 6F75726365466F7267-
   183 00000041 6520616E6420696E20-
   184 0000004A 696E74656E73697665-
   185 00000053 20646576656C6F706D-
   186 0000005C 656E742120         
   187 00000061 476574207468652063-              db 'Get the current versions from http://www.nasm.us/.'
   188 0000006A 757272656E74207665-
   189 00000073 7273696F6E73206672-
   190 0000007C 6F6D20687474703A2F-
   191 00000085 2F7777772E6E61736D-
   192 0000008E 2E75732F2E         
   193 00000093 0D0A0D0A                         db 0x0d,0x0a,0x0d,0x0a
   194 00000097 20204578616D706C65-              db '  Example code for calculate 1+2+...+1000:',0x0d,0x0a,0x0d,0x0a
   195 000000A0 20636F646520666F72-
   196 000000A9 2063616C63756C6174-
   197 000000B2 6520312B322B2E2E2E-
   198 000000BB 2B313030303A0D0A0D-
   199 000000C4 0A                 
   200 000000C5 2020202020786F7220-              db '     xor dx,dx',0x0d,0x0a
   201 000000CE 64782C64780D0A     
   202 000000D5 2020202020786F7220-              db '     xor ax,ax',0x0d,0x0a
   203 000000DE 61782C61780D0A     
   204 000000E5 2020202020786F7220-              db '     xor cx,cx',0x0d,0x0a
   205 000000EE 63782C63780D0A     
   206 000000F5 202040403A0D0A                   db '  @@:',0x0d,0x0a
   207 000000FC 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   208 00000105 63780D0A           
   209 00000109 202020202061646420-              db '     add ax,cx',0x0d,0x0a
   210 00000112 61782C63780D0A     
   211 00000119 202020202061646320-              db '     adc dx,0',0x0d,0x0a
   212 00000122 64782C300D0A       
   213 00000128 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   214 00000131 63780D0A           
   215 00000135 2020202020636D7020-              db '     cmp cx,1000',0x0d,0x0a
   216 0000013E 63782C313030300D0A 
   217 00000147 20202020206A6C6520-              db '     jle @@',0x0d,0x0a
   218 00000150 40400D0A           
   219 00000154 20202020202E2E2E20-              db '     ... ...(Some other codes)',0x0d,0x0a,0x0d,0x0a
   220 0000015D 2E2E2E28536F6D6520-
   221 00000166 6F7468657220636F64-
   222 0000016F 6573290D0A0D0A     
   223 00000176 00                               db 0
   224                                  
   225                                  ;===============================================================================
   226                                  SECTION data_2 align=16 vstart=0
   227                                  
   228 00000000 20205468652061626F-         msg1 db '  The above contents is written by LeeChung. '
   229 00000009 766520636F6E74656E-
   230 00000012 747320697320777269-
   231 0000001B 7474656E206279204C-
   232 00000024 65654368756E672E20 
   233 0000002D 323031312D30352D30-              db '2011-05-06'
   234 00000036 36                 
   235 00000037 00                               db 0
   236                                  
   237                                  ;===============================================================================
   238                                  SECTION stack align=16 vstart=0
   239                                             
   240 00000000 <res 00000100>                   resb 256
   241          ******************       warning: uninitialized space declared in stack section: zeroing
   242                                  
   243                                  stack_end:  
   244                                  
   245                                  ;===============================================================================
   246                                  SECTION trail align=16
   247                                  program_end:
